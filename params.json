{"name":"Symphony","tagline":"An unofficial Java wrapper for the Conductor SearchLight APIs","body":"# symphony\r\nAn unofficial Java wrapper for the SearchLight Conductor APIs: http://developers.conductor.com/docs\r\n\r\n### adding symphony to your project\r\nsymphony is hosted on <a href=\"http://search.maven.org/#artifactdetails%7Ccom.eveningsamurai.symphony%7Csymphony%7C0.2.4%7Cjar\" target=\"_blank\">maven central</a>\r\n#### apache maven\r\n```xml\r\n<dependency>\r\n    <groupId>com.eveningsamurai.symphony</groupId>\r\n    <artifactId>symphony</artifactId>\r\n    <version>0.2.4</version>\r\n</dependency>\r\n```\r\n#### apache buildr\r\n'com.eveningsamurai.symphony:symphony:jar:0.2.4'\r\n\r\n#### apache ivy\r\n```xml\r\n<dependency org=\"com.eveningsamurai.symphony\" name=\"symphony\" rev=\"0.2.4\" />\r\n```\r\n\r\n#### gradle\r\ncompile 'com.eveningsamurai.symphony:symphony:0.2.4'\r\n\r\n### third party dependencies\r\nsymphony is a fat jar and contains the following dependencies\r\n\r\n* gson\r\n* guava\r\n\r\n## usage examples\r\n### initialization\r\n```java\r\n//access to the searchlight conductor requires an api key and a shared secret\r\nSymphonyClient client = new SymphonyClient(apiKey, sharedSecret);\r\n```\r\n#### fetching account details\r\n```java\r\n//fetch the account associated with the api key and shared secret\r\nAccountRequest req = client.accountInfo();\r\nAccountResponse[] res = (AccountResponse[]) req.call();\r\n\r\nSystem.out.println(\"Account Id: \" + res[0].getAccountId());\r\n```\r\n\r\n#### fetching the rank source, device, location or category data\r\n```java\r\n//list of rank sources that the tracked searches will be associated with\r\nRankSourceListRequest req = client.rankSourceList();\r\nRankSourceListResponse[] list = (RankSourceListResponse[]) req.call();\r\n\r\nSystem.out.println(\"Rank Source Description: \" + list[0].getDescription());\r\n\r\n//list of devices that the searches are tracked against\r\nDeviceListRequest req = client.deviceList();\r\nDeviceListResponse[] list = (DeviceListResponse[]) req.call();\r\n\r\nSystem.out.println(\"Device List Description\" + list[0].getDescription());\r\n\r\n//list of locations used to identify the search origination \r\nLocationListRequest req = client.locationList();\r\nLocationListResponse[] list = (LocationListResponse[]) req.call();\r\n\r\nSystem.out.println(\"Location List Description\" + list[0].getDescription());\r\n\r\n//list of categories associated with each tracked search id\r\nCategoryListRequest req = client.categoryList(\"MY_ACCOUNT_ID\");\r\nCategoryListResponse[] res = (CategoryListResponse[]) req.call();\r\n\r\nSystem.out.println(\"Cateogory Name: \" + res[0].getName());\r\n```\r\n\r\n#### getting the list of web properties associated with the account\r\n```java\r\n//list of web properties for the account\r\nWebPropertyListRequest req = client.webProperties(\"MY_ACCOUNT_ID\");\r\nWebPropertyListResponse[] res = (WebPropertyListResponse[]) req.call();\r\n\r\nSystem.out.println(\"Web Property URL: \" + res[0].getName());\r\nSystem.out.println(\"Search Engine Id: \" + res[0].getRankSourceInfo()[0].getRankSourceId());\r\nSystem.out.println(\"Comparison Web Property Name: \" + res[0].getRankSourceInfo()[0].getComparisonWebProperties()[0].getName());\r\n```\r\n\r\n#### getting tracked search data\r\n```java\r\n//returns a list of all client web properties for the given account\r\nSymphonyClient client = new SymphonyClient(apiKey, sharedSecret);\r\nTrackedSearchListRequest req = client.trackedSearches(\"MY_ACCOUNT_ID\", \"MY_WEB_PROPERTY_ID\");\r\nTrackedSearchListResponse[] res = (TrackedSearchListResponse[]) req.call();\r\n\r\nSystem.out.println(\"Tracked Search Id\" + res[0].getTrackedSearchId());\r\nSystem.out.println(\"Query Phrase\" + res[0].getQueryPhrase());\r\n```\r\n\r\n#### getting web property rank data\r\n```java\r\n//report of all the result items of interest seen for all tracked searches on a particular client web property when measured against a particular rank source\r\nClientWebPropertyRankRequest req = client.webPropertyRanks(\"MY_ACCOUNT_ID\", \"MY_WEB_PROPERTY_ID\", \"MY_RANK_SOURCE_ID\");\r\nClientWebPropertyRankResponse[] res = (ClientWebPropertyRankResponse[]) req.call();\r\n\r\nSystem.out.println(\"Item Type: \" + res[0].getItemType());\r\nSystem.out.println(\"Search result URL: \" + res[0].getTargetUrl());\r\nSystem.out.println(\"Universal Rank: \" + res[0].getRanks().getUniversalRank());\r\n```\r\n\r\n#### getting search volume information\r\n```java\r\n//report of monthly volumes seen for all tracked searches on  a particular client web property when measured against a particular rank source\r\nClientWebPropertyVolumeRequest req = client.webPropertyVolume(\"MY_ACCOUNT_ID\", \"MY_WEB_PROPERTY_ID\", \"MY_RANK_SOURCE_ID\");\r\nClientWebPropertyVolumeResponse[] res = (ClientWebPropertyVolumeResponse[]) req.call();\r\n\t\t\r\nSystem.out.println(\"Tracked Search Id: \" + res[0].getTrackedSearchId());\r\nSystem.out.println(\"Average volume of the tracked search id: \" + res[0].getAverageVolume());\r\nSystem.out.println(\"Month: \" + res[0].getVolumeItems()[0].getMonth());\r\nSystem.out.println(\"Volume for month: \" + res[0].getVolumeItems()[0].getVolume());\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}